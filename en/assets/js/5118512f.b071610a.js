"use strict";(self.webpackChunkutm_doc=self.webpackChunkutm_doc||[]).push([[4212],{201:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"Concepts/Gazebo","title":"Gazebo ","description":"URDF, XACRO, and SDF in Gazebo: Core Robot Modeling Formats","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/11_Concepts/Gazebo.md","sourceDirName":"11_Concepts","slug":"/Concepts/Gazebo","permalink":"/en/Concepts/Gazebo","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Gazebo ","source":"https://wiki.utmsys.org/Concepts/Gazebo"},"sidebar":"tutorialSidebar","previous":{"title":"11. \u76f8\u5173\u6982\u5ff5","permalink":"/en/11_Concepts"},"next":{"title":"Micro XRCE-DDS ","permalink":"/en/Concepts/Micro XRCE-DDS"}}');var o=i(4848),t=i(8453);const r={title:"Gazebo ",source:"https://wiki.utmsys.org/Concepts/Gazebo"},a=void 0,l={},d=[{value:"URDF, XACRO, and SDF in Gazebo: Core Robot Modeling Formats",id:"urdf-xacro-and-sdf-in-gazebo-core-robot-modeling-formats",level:3},{value:"1. URDF (Unified Robot Description Format):",id:"1-urdf-unified-robot-description-format",level:4},{value:"Core components and application",id:"core-components-and-application",level:5},{value:"2. XACRO (XML Macro): Advanced Extension",id:"2-xacro-xml-macro-advanced-extension",level:4},{value:"Core Features and",id:"core-features-and",level:5},{value:"3. SDF (Simulation Description Format): Gazebo\u2019s proprietary simulation",id:"3-sdf-simulation-description-format-gazebos-proprietary-simulation",level:4},{value:"Core components and Gazebo",id:"core-components-and-gazebo",level:5},{value:"4.",id:"4",level:4},{value:"5. Practical Application Process (Taking Gazebo Simulation as an Example",id:"5-practical-application-process-taking-gazebo-simulation-as-an-example",level:4},{value:"6.",id:"6",level:4}];function c(e){const n={a:"a",code:"code",h3:"h3",h4:"h4",h5:"h5",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h3,{id:"urdf-xacro-and-sdf-in-gazebo-core-robot-modeling-formats",children:"URDF, XACRO, and SDF in Gazebo: Core Robot Modeling Formats"}),"\n",(0,o.jsx)(n.h4,{id:"1-urdf-unified-robot-description-format",children:"1. URDF (Unified Robot Description Format):"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Definition"}),": URDF is an XML format used in ROS (Robot Operating System) to describe the three-dimensional structure, joint connections, and kinematic characteristics of a robot. It was developed by the ROS community and is widely used in robot simulation and control."]}),"\n",(0,o.jsx)(n.h5,{id:"core-components-and-application",children:"Core components and application"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Key Elements"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Link"}),": defines the rigid components of the robot, including geometric shape (such as box, cylinder, mesh), mass, inertia matrix and other physical properties."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Joint"}),": Connects two links, supports revolute, prismatic, fixed and other motion types, and can set the range of motion and dynamic parameters."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Visual model"}),": describes the appearance of the connecting rod and is used for simulation visualization."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Collision (collision model)"}),": defines the collision shape of the connecting rod for physics engine calculation."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.strong,{children:"Example snippet"})}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",children:'<robot name="my_robot">\n  <link name="base_link">\n    <inertial>\n      <mass value="1.0"/>\n      \x3c!-- \u60ef\u6027\u77e9\u9635\u7701\u7565 --\x3e\n    </inertial>\n    <visual>\n      <geometry><box size="0.2 0.2 0.1"/></geometry>\n    </visual>\n    <collision>\n      <geometry><box size="0.2 0.2 0.1"/></geometry>\n    </collision>\n  </link>\n  <joint name="base_to_wheel" type="revolute">\n    <parent link="base_link"/>\n    <child link="wheel_link"/>\n    <axis xyz="0 1 0"/>\n  </joint>\n</robot>\n'})}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Advantages and Disadvantages"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Advantages"}),": Simple structure, deep integration with the ROS ecosystem, suitable for describing the kinematic model of rigid robots."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Disadvantages"}),": Lack of description of simulation environment elements such as sensors and lights, and cumbersome writing of complex models."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h4,{id:"2-xacro-xml-macro-advanced-extension",children:"2. XACRO (XML Macro): Advanced Extension"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Definition"}),": XACRO is a macro language based on URDF. It simplifies the writing of complex robot models through variable definition, parametric modeling and module reuse. It is essentially a preprocessing format of URDF."]}),"\n",(0,o.jsx)(n.h5,{id:"core-features-and",children:"Core Features and"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Key Features"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Variables and parameterization"}),": ",(0,o.jsx)(n.code,{children:"<property>"})," Define ",(0,o.jsx)(n.code,{children:"<param>"})," reusable values (such as length and mass) to avoid repetitive writing."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Macro definition"}),": Encapsulate repeated modules as macros, such as defining a wheel model and instantiating it multiple times:","\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",children:'<macro name="wheel" params="name xyz rpy">\n  \x3c!-- \u8f6e\u5b50\u6a21\u578b\u5b9a\u4e49 --\x3e\n</macro>\n<wheel name="left_wheel" xyz="0.1 0.05 0" rpy="0 0 0"/>\n'})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Conditional compilation"}),": ",(0,o.jsx)(n.code,{children:"<if>"})," ",(0,o.jsx)(n.code,{children:"<else>"})," Dynamically generates models based on parameters, suitable for multi-version robot configuration."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Advantages"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Code reuse"}),": Reduce duplication of code. For example, the four legs of a quadruped robot can be instantiated through macros, and only the parameters need to be modified."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Maintainability"}),": Centrally manage global parameters (such as robot height and joint limits), and modify one place to apply to the entire model."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h4,{id:"3-sdf-simulation-description-format-gazebos-proprietary-simulation",children:"3. SDF (Simulation Description Format): Gazebo\u2019s proprietary simulation"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Definition"}),": SDF is the scene description format used by the Gazebo physics engine. It supports the complete definition of robot models, environmental elements (such as terrain, light sources), sensors, and physical rules. It was developed by Open Robotics."]}),"\n",(0,o.jsx)(n.h5,{id:"core-components-and-gazebo",children:"Core components and Gazebo"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Key Elements (Compared to URDF)"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"World"}),": Contains multiple models, physics engine configuration (such as gravity, friction coefficient), and environmental properties (such as skybox and wind speed)."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Model"}),": It can contain multiple Links and Joints. It is similar to the URDF structure, but extends sensors (such as Camera, LiDAR) and dynamic properties (such as joint motor control parameters)."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Plugin"}),": Extend functions through C++/Python plug-ins, such as defining joint controllers and sensor data output interfaces."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Relationship between SDF and URDF"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Compatibility and extension"}),": SDF can directly import URDF models, but the sensor and physics engine parameters that URDF lacks need to be supplemented in SDF."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Example comparison"}),": URDF defines the robot structure, and SDF adds Gazebo-specific simulation parameters (such as joint damping and sensor noise model) on this basis."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.strong,{children:"Typical structure"})}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",children:'<sdf version="1.9">\n  <world name="default">\n    <include>\n      <uri>model://my_robot</uri> \x3c!-- \u5f15\u7528\u673a\u5668\u4eba\u6a21\u578b --\x3e\n    </include>\n    <physics name="default_physics">\n      <gravity>0 0 -9.81</gravity>\n      <ode>\n        <solver>\n          <type>quick</type>\n        </solver>\n      </ode>\n    </physics>\n    <model name="my_robot">\n      \x3c!-- \u673a\u5668\u4ebaLink\u548cJoint\u5b9a\u4e49\uff0c\u7c7b\u4f3cURDF --\x3e\n      <sensor name="camera_sensor" type="camera">\n        <pose>0 0 0.5 0 0 0</pose>\n        <camera>\n          <horizontal_fov>1.57</horizontal_fov>\n          <image>\n            <width>640</width>\n            <height>480</height>\n          </image>\n        </camera>\n      </sensor>\n    </model>\n  </world>\n</sdf>\n'})}),"\n",(0,o.jsx)(n.h4,{id:"4",children:"4."}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Format"}),(0,o.jsx)(n.th,{children:"Core Features"}),(0,o.jsx)(n.th,{children:"Applicable Scenarios"}),(0,o.jsx)(n.th,{children:"Relationship with Gazebo"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.strong,{children:"URDF"})}),(0,o.jsx)(n.td,{children:"Robot kinematics and structural description"}),(0,o.jsx)(n.td,{children:"ROS robot control and motion planning"}),(0,o.jsx)(n.td,{children:"Can be imported into Gazebo, but lacks simulation details"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.strong,{children:"BREAKING NEWS"})}),(0,o.jsx)(n.td,{children:"URDF parameterization and modularization tools"}),(0,o.jsx)(n.td,{children:"Complex robot model development and multi-version configuration"}),(0,o.jsx)(n.td,{children:"Preprocess to URDF and import into Gazebo"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.strong,{children:"SDF"})}),(0,o.jsx)(n.td,{children:"Complete simulation scene description (including physics engine parameters)"}),(0,o.jsx)(n.td,{children:"Gazebo simulation, sensor simulation, and environment construction"}),(0,o.jsx)(n.td,{children:"Gazebo native support, recommended for simulation"})]})]})]}),"\n",(0,o.jsx)(n.h4,{id:"5-practical-application-process-taking-gazebo-simulation-as-an-example",children:"5. Practical Application Process (Taking Gazebo Simulation as an Example"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Use XACRO to write parameterized URDF models to define the robot structure (such as robotic arm links and joints)."}),"\n",(0,o.jsx)(n.li,{children:"Generate standard URDF through XACRO preprocessing, or directly reference URDF model in SDF."}),"\n",(0,o.jsxs)(n.li,{children:["Add Gazebo-specific elements to SDF:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Physics engine configuration (such as ODE, Bullet), sensor model (such as lidar, IMU)."}),"\n",(0,o.jsx)(n.li,{children:"Add environment models (such as ground, obstacles) and plugins (such as joint position controllers)."}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.li,{children:"Start Gazebo and load the SDF file to realize the physical simulation and interaction of the robot in the virtual environment."}),"\n"]}),"\n",(0,o.jsx)(n.h4,{id:"6",children:"6."}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Open source model library"}),": ",(0,o.jsx)(n.a,{href:"https://app.gazebosim.org/fuel/models",children:"Gazebo Model Zoo"})," provides a large number of SDF models of robots and environments."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Learning Materials"}),": ",(0,o.jsx)(n.a,{href:"https://gazebosim.org/docs/latest/tutorials/",children:"Gazebo Documentation"})]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"By flexibly combining URDF, XACRO, and SDF, you can efficiently build simple to complex robot simulation systems to meet the needs of scientific research, education, and engineering development."})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>a});var s=i(6540);const o={},t=s.createContext(o);function r(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);