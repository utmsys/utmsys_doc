"use strict";(self.webpackChunkutm_doc=self.webpackChunkutm_doc||[]).push([[6639],{937:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"Terminal_Access/PX4","title":"4.1 PX4 ","description":"PX4 supports terminal access to the system via MAVLink Shell and the system console.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/04_Terminal_Access/01_PX4.md","sourceDirName":"04_Terminal_Access","slug":"/Terminal_Access/PX4","permalink":"/en/Terminal_Access/PX4","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"4.1 PX4 ","source":"https://wiki.utmsys.org/Terminal_Access/PX4"},"sidebar":"tutorialSidebar","previous":{"title":"4. \u7ec8\u7aef\u8bbf\u95ee","permalink":"/en/04_Terminal_Access"},"next":{"title":"4.2 RDK X5 Module ","permalink":"/en/Terminal_Access/RDK X5 Module"}}');var i=s(4848),o=s(8453);const l={title:"4.1 PX4 ",source:"https://wiki.utmsys.org/Terminal_Access/PX4"},r="4.1 PX4",c={},d=[{value:"MAVLink Shell",id:"mavlink-shell",level:2},{value:"Via the QGroundControl MAVLink",id:"via-the-qgroundcontrol-mavlink",level:3},{value:"Through the PX4-Autopilot source code comes with",id:"through-the-px4-autopilot-source-code-comes-with",level:3},{value:"PX4 System Console",id:"px4-system-console",level:2},{value:"Connecting",id:"connecting",level:3},{value:"Dedicated",id:"dedicated",level:3},{value:"Pixhawk Debug",id:"pixhawk-debug",level:3},{value:"Open the system",id:"open-the-system",level:3},{value:"use the PX4 system console/MAVLink Shell",id:"use-the-px4-system-consolemavlink-shell",level:2},{value:"More",id:"more",level:2}];function a(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"41-px4",children:"4.1 PX4"})}),"\n",(0,i.jsxs)(n.p,{children:["PX4 supports terminal access to the system via ",(0,i.jsx)(n.a,{href:"https://docs.px4.io/main/en/debug/mavlink_shell.html",children:"MAVLink Shell"})," and ",(0,i.jsx)(n.a,{href:"https://docs.px4.io/main/en/debug/system_console.html",children:"the system console."})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"The PX4 System Console"})," provides low-level access to the system, debug output, and analysis of the system boot process:"]}),"\n",(0,i.jsxs)(n.p,{children:["There is only one ",(0,i.jsx)(n.em,{children:"system console, which runs on a specific UART (the debug port, as configured in NuttX) and is usually connected to the computer via an FTDI cable (or some other debug adapter, such as"})," ",(0,i.jsx)(n.a,{href:"https://github.com/Zubax/bugface_bf1",children:"the Zubax BugFace BF1"})," )."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Used for ",(0,i.jsx)(n.em,{children:"low-level debugging/development"}),": booting, NuttX, startup scripts, board booting, development of core parts of PX4 (e.g. uORB)."]}),"\n",(0,i.jsx)(n.li,{children:"In particular, this is the only place where all startup output (including information about applications that start automatically at boot) is printed."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"MAVLink Shell"})," provides higher-level access to the system:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"For basic module testing/running commands."}),"\n",(0,i.jsxs)(n.li,{children:["Only output from modules that you ",(0,i.jsx)(n.em,{children:"directly"})," start is displayed."]}),"\n",(0,i.jsxs)(n.li,{children:["There is no way to ",(0,i.jsx)(n.em,{children:"directly"})," display the output of tasks running on a work queue."]}),"\n",(0,i.jsx)(n.li,{children:"It is not possible to debug a problem when the system is not started (because it is not yet running)."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["There can be multiple shells, either running on a dedicated UART or via MAVLink. Currently only the MAVLink Shell is used, as MAVLink offers greater flexibility ",(0,i.jsx)(n.a,{href:"https://docs.px4.io/main/en/debug/mavlink_shell.html",children:"."})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://docs.px4.io/main/en/debug/system_console.html",children:"The System Console"})," is essential if the system fails to boot (it displays the system boot log when the board is powered off and on). MAVLink ",(0,i.jsx)(n.a,{href:"https://docs.px4.io/main/en/debug/mavlink_shell.html",children:"Shell"})," is easier to set up and is generally recommended for most debugging."]}),"\n",(0,i.jsx)(n.h2,{id:"mavlink-shell",children:"MAVLink Shell"}),"\n",(0,i.jsxs)(n.p,{children:["MAVLink Shell is an ",(0,i.jsx)(n.em,{children:"NSH console"})," that can be accessed via MAVLink over a serial (USB/Telemetry) or WiFi (UDP/TCP) link (specifically on NuttX based systems like Pixhawk, Pixracer, etc)."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"FC USB to PC"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The shell can be used to run commands and modules and display their output. Although the shell cannot ",(0,i.jsx)(n.em,{children:"directly"})," display the output of modules it has not started, it can ",(0,i.jsx)(n.code,{children:"dmesg"})," display it indirectly using the command ( ",(0,i.jsx)(n.code,{children:"dmesg -f &"})," which can be used to display the output of other modules and tasks running in the work queue)."]}),"\n",(0,i.jsx)(n.h3,{id:"via-the-qgroundcontrol-mavlink",children:"Via the QGroundControl MAVLink"}),"\n",(0,i.jsxs)(n.p,{children:["The easiest way to access the shell is to use ",(0,i.jsx)(n.a,{href:"https://docs.qgroundcontrol.com/master/en/qgc-user-guide/analyze_view/mavlink_console.html",children:"the QGroundControl MAVLink console"})," (see ",(0,i.jsx)(n.strong,{children:"Analyze View > Mavlink Console"})," ). The console only works when connected to hardware running the PX4 flight suite. PX4 SITL and ArduPilot are not supported."]}),"\n",(0,i.jsx)(n.p,{children:"This feature is very useful for developers because it allows deep access to the system. In particular, if you are connected via Wi-Fi, you can gain the same level of access as when the aircraft is flying."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://docs.qgroundcontrol.com/master/assets/mavlink_console.D0C29QfQ.jpg",alt:"Analysis View MAVLink Console"})}),"\n",(0,i.jsxs)(n.p,{children:["The view does not display any output unless in response to a command. Once the vehicle is connected, you can enter commands in the field provided (to see a full list of available commands, enter ) ",(0,i.jsx)(n.code,{children:"?"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"The command output is displayed in the view above the command bar. Click **Show Latest** to jump to the bottom of the command output."}),"\n",(0,i.jsx)(n.h3,{id:"through-the-px4-autopilot-source-code-comes-with",children:"Through the PX4-Autopilot source code comes with"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"You can also"})," access the shell in a terminal using the mavlink_shell.py script:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Close QGroundControl."}),"\n",(0,i.jsxs)(n.li,{children:["Install dependencies:","\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-markdown",children:"pip3 install --user pymavlink pyserial\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Open Terminal (in the PX4-Autopilot directory) and start a shell:","\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-markdown",children:"# For serial port\n./Tools/mavlink_shell.py /dev/ttyACM0\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-markdown",children:"# For Wifi connection\n./Tools/mavlink_shell.py 0.0.0.0:14550\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Gets ",(0,i.jsx)(n.code,{children:"mavlink_shell.py -h"})," a description of all available parameters."]}),"\n",(0,i.jsx)(n.h2,{id:"px4-system-console",children:"PX4 System Console"}),"\n",(0,i.jsxs)(n.p,{children:["The PX4 ",(0,i.jsx)(n.em,{children:"System Console"})," provides low-level access to the system, debug output, and analysis of the system boot process."]}),"\n",(0,i.jsx)(n.h3,{id:"connecting",children:"Connecting"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"FC Debug connected to PC diagram"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The console is connected via a (board-specific) UART connection, which can be connected to a computer USB port using a ",(0,i.jsx)(n.a,{href:"https://www.digikey.com/en/products/detail/TTL-232R-3V3/768-1015-ND/1836393",children:"3.3V FTDI"})," cable. This allows the console to be accessed using a terminal application."]}),"\n",(0,i.jsxs)(n.p,{children:["Pixhawk controller manufacturers should expose console UART and SWD (JTAG) debug interfaces through dedicated ",(0,i.jsx)(n.em,{children:"debug ports that conform"})," ",(0,i.jsx)(n.a,{href:"https://docs.px4.io/main/en/debug/#pixhawk_debug_port",children:"to the Pixhawk connector standard"}),". Unfortunately, some development boards predate or do not conform to this standard."]}),"\n",(0,i.jsx)(n.p,{children:"The following sections outline/link to wiring and system console information for many common boards."}),"\n",(0,i.jsx)(n.h3,{id:"dedicated",children:"Dedicated"}),"\n",(0,i.jsxs)(n.p,{children:["The system console UART pinout/debug port is generally documented on ",(0,i.jsx)(n.a,{href:"https://docs.px4.io/main/en/flight_controller/",children:"the autopilot overview page"})," (some of which are linked below):"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://docs.px4.io/main/en/flight_controller/pixhawk.html#console-port",children:"3DR Pixhawk v1 flight controller"})," (also works with ",(0,i.jsx)(n.a,{href:"https://docs.px4.io/main/en/flight_controller/mro_pixhawk.html#debug-ports",children:"mRo Pixhawk"}),", ",(0,i.jsx)(n.a,{href:"https://docs.px4.io/main/en/flight_controller/holybro_pix32.html#debug-port",children:"Holybro Pix32"})," )"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://docs.px4.io/main/en/flight_controller/pixhawk3_pro.html#debug-port",children:"Pixhawk 3"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://docs.px4.io/main/en/flight_controller/pixracer.html#debug-port",children:"Pixracer"})}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"pixhawk-debug",children:"Pixhawk Debug"}),"\n",(0,i.jsxs)(n.p,{children:["Pixhawk flight controllers are usually equipped with ",(0,i.jsx)(n.a,{href:"https://docs.px4.io/main/en/debug/swd_debug.html#pixhawk-connector-standard-debug-ports",children:"a Pixhawk connector standard debug port"}),", which can be a 10-pin ",(0,i.jsx)(n.a,{href:"https://docs.px4.io/main/en/debug/swd_debug.html#pixhawk-debug-full",children:"Pixhawk Debug Full"})," port or a 6-pin ",(0,i.jsx)(n.a,{href:"https://docs.px4.io/main/en/debug/swd_debug.html#pixhawk-debug-mini",children:"Pixhawk Debug Mini"})," port."]}),"\n",(0,i.jsxs)(n.p,{children:["These ports have pins for console TX and RX, which can be connected to an FTDI cable. ",(0,i.jsx)(n.a,{href:"https://docs.px4.io/main/en/debug/swd_debug.html#pixhawk-debug-mini",children:"The Pixhawk Debug Mini"})," to FTDI mapping is shown below."]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Pixhawk debug port"}),(0,i.jsx)(n.th,{children:"-"}),(0,i.jsx)(n.th,{children:"FTDI"}),(0,i.jsx)(n.th,{children:"-"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"1 (red)"}),(0,i.jsx)(n.td,{children:"Target processor voltage"}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{children:"N/C (for SWD/JTAG debugging)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"2 (black)"}),(0,i.jsx)(n.td,{children:"Console TX (output)"}),(0,i.jsx)(n.td,{children:"5"}),(0,i.jsx)(n.td,{children:"FTDI RX (yellow)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"3 (black)"}),(0,i.jsx)(n.td,{children:"Console RX (Input)"}),(0,i.jsx)(n.td,{children:"4"}),(0,i.jsx)(n.td,{children:"FTDI TX (orange)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"4 (black)"}),(0,i.jsx)(n.td,{children:"SWEDING"}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{children:"N/C (for SWD/JTAG debugging)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"5 (black)"}),(0,i.jsx)(n.td,{children:"Switching clock"}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{children:"N/C (for SWD/JTAG debugging)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"6 (black)"}),(0,i.jsx)(n.td,{children:"Grounding"}),(0,i.jsx)(n.td,{children:"1"}),(0,i.jsx)(n.td,{children:"FTDI GND (black)"})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://docs.px4.io/main/en/debug/swd_debug.html",children:"The SWD Debug Port"})," page and the separate Flight Controller page contain more information on the debug port pinout."]}),"\n",(0,i.jsx)(n.h3,{id:"open-the-system",children:"Open the system"}),"\n",(0,i.jsx)(n.p,{children:"Once the console connection is established, use the default serial port tool of your choice or the default tool described below:"}),"\n",(0,i.jsx)(n.p,{children:"For example, to install the screen tool on Ubuntu:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-markdown",children:"sudo apt-get install screen\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Serial port: Pixhawk v1 / Pixracer uses 57600 baud"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Connect screen to the correct serial port with baud rate of BAUDRATE, data bits of 8, and stop bits of 1 (play around with it ",(0,i.jsx)(n.code,{children:"ls /dev/tty*"})," and observe how it changes when you unplug/replug the USB device). Common names on Linux systems are ",(0,i.jsx)(n.code,{children:"/dev/ttyUSB0"})," and, and on Mac OS systems are.",(0,i.jsx)(n.code,{children:"/dev/ttyACM0``/dev/tty.usbserial-ABCBD"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-markdown",children:"screen /dev/ttyXXX BAUDRATE 8N1\n"})}),"\n",(0,i.jsx)(n.h2,{id:"use-the-px4-system-consolemavlink-shell",children:"use the PX4 system console/MAVLink Shell"}),"\n",(0,i.jsxs)(n.p,{children:["The MAVLink shell/console and ",(0,i.jsx)(n.a,{href:"https://docs.px4.io/main/en/debug/system_console.html",children:"the system console"})," are used in much the same way."]}),"\n",(0,i.jsxs)(n.p,{children:["For example, type ",(0,i.jsx)(n.code,{children:"ls"})," to view the local file system, ",(0,i.jsx)(n.code,{children:"free"})," view remaining available RAM, and ",(0,i.jsx)(n.code,{children:"dmesg"})," view boot output."]}),"\n",(0,i.jsxs)(n.p,{children:["Following are some commands that you can use in ",(0,i.jsx)(n.a,{href:"https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=139629410",children:"NuttShell"})," to understand your system."]}),"\n",(0,i.jsx)(n.p,{children:"This NSH command provides the remaining available memory:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"free\n"})}),"\n",(0,i.jsx)(n.p,{children:"The top command shows the stack usage of each application:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"top\n"})}),"\n",(0,i.jsx)(n.p,{children:"Note that stack usage is calculated via stack coloring and is the maximum value since the task started (not the current usage)."}),"\n",(0,i.jsx)(n.p,{children:"To see what is running in the work queue and at what rate, use:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"work_queue status\n"})}),"\n",(0,i.jsx)(n.p,{children:"To debug a uORB topic:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"uorb top\n"})}),"\n",(0,i.jsx)(n.p,{children:"To check for a specific uORB topic:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"listener <topic_name>\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"top"})," Many other system commands and modules (such as, etc.) are listed in ",(0,i.jsx)(n.a,{href:"https://docs.px4.io/main/en/modules/modules_main.html",children:"Module and Command Reference"})," ",(0,i.jsx)(n.code,{children:"listener"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"more",children:"More"}),"\n",(0,i.jsxs)(n.p,{children:["Please refer to the official PX4 documentation ",(0,i.jsx)(n.a,{href:"https://docs.px4.io/main/en/debug/consoles.html",children:"https://docs.px4.io/main/en/debug/consoles.html"})]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>r});var t=s(6540);const i={},o=t.createContext(i);function l(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);