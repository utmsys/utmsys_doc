"use strict";(self.webpackChunkutm_doc=self.webpackChunkutm_doc||[]).push([[9113],{3546:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"System_Config/RDK X5 Module/self_start","title":"5.2.5 Auto Start ","description":"Video//www.bilibili.com/video/BV1rm4y1E73q/?p=15","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/05_System_Config/02_RDK X5 Module/05_self_start.md","sourceDirName":"05_System_Config/02_RDK X5 Module","slug":"/System_Config/RDK X5 Module/self_start","permalink":"/en/System_Config/RDK X5 Module/self_start","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"title":"5.2.5 Auto Start ","source":"https://wiki.utmsys.org/System_Config/RDK%20X5%20Module/self_start"},"sidebar":"tutorialSidebar","previous":{"title":"5.2.4 Thermal & CPU Frequency Management","permalink":"/en/System_Config/RDK X5 Module/frequency_management"},"next":{"title":"6. \u8f6f\u4ef6\u5b89\u88c5","permalink":"/en/06_Software_Install"}}');var r=s(4848),o=s(8453);const a={title:"5.2.5 Auto Start ",source:"https://wiki.utmsys.org/System_Config/RDK%20X5%20Module/self_start"},i=void 0,c={},l=[{value:"Set up auto-start",id:"set-up-auto-start",level:2},{value:"Add to rc.local",id:"add-to-rclocal",level:2}];function d(e){const t={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["Video: ",(0,r.jsx)(t.a,{href:"https://www.bilibili.com/video/BV1rm4y1E73q/?p=15",children:"https://www.bilibili.com/video/BV1rm4y1E73q/?p=15"})]}),"\n",(0,r.jsx)(t.p,{children:"There are many ways to add startup programs to the Ubuntu system. This section provides two methods for reference."}),"\n",(0,r.jsx)(t.h2,{id:"set-up-auto-start",children:"Set up auto-start"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["Creating a startup script\nUsing any text editor, ",(0,r.jsx)(t.code,{children:"/etc/init.d"})," create a new startup script in the directory named ",(0,r.jsx)(t.code,{children:"your_script_name"}),". The following is a sample script for reference:","\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"#!/bin/bash\n### BEGIN INIT INFO\n# Provides:          your_service_name\n# Required-Start:    $all\n# Required-Stop:     \n# Default-Start:     2 3 4 5\n# Default-Stop:      0 1 6\n# Short-Description: Start your_service_name at boot time\n# Description:       Enable service provided by your_service_name\n### END INIT INFO\n/path/to/your/program &\nexit 0\n"})}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["Set the startup script to have executable permissions","\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-markdown",children:"sudo chmod +x /etc/init.d/your_script_name\n"})}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["Use the update-rc.d command to add the script to the system startup item","\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-markdown",children:"sudo update-rc.d your_script_name defaults\n"})}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["Enable auto-start using the systemctl command","\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-markdown",children:"sudo systemctl enable your_script_name\n"})}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["Restart the development board to verify whether the self-start service program is running normally","\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-markdown",children:"root@ubuntu:~# systemctl status your_script_name.service \n\u25cf your_script_name.service - LSB: Start your_service_name at boot time\n    Loaded: loaded (/etc/init.d/your_script_name; generated)\n    Active: active (exited) since Wed 2023-04-19 15:01:12 CST; 57s ago\n    Docs: man:systemd-sysv-generator(8)\n    Process: 2768 ExecStart=/etc/init.d/your_script_name start (code=exited, status=0/SUCCESS)\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"add-to-rclocal",children:"Add to rc.local"}),"\n",(0,r.jsx)(t.p,{children:"rc.local is a system service that automatically executes scripts or commands at system startup. This service is automatically called when the system boots up and executes user-specified scripts or commands after the system boots up, allowing for custom configuration or operations at system startup."}),"\n",(0,r.jsx)(t.p,{children:"In early Linux distributions, rc.local was the last service to be run by default during the system startup process. With the popularity of systemd, rc.local is considered a legacy system service."}),"\n",(0,r.jsxs)(t.p,{children:["This is achieved by ",(0,r.jsx)(t.code,{children:"sudo vim /etc/rc.local"})," adding a startup command at the end of the file, for example:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:'#!/bin/bash -e\n#\n# rc.local\n#re\n# This script is executed at the end of each multiuser runlevel.\n# Make sure that the script will "exit 0" on success or any other\n# value on error.\n#\n# In order to enable or disable this script just change the execution\n# bits.\n#\n# By default this script does nothing.\n\n# Insert what you need\n\nexit 0\n'})})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>a,x:()=>i});var n=s(6540);const r={},o=n.createContext(r);function a(e){const t=n.useContext(o);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);