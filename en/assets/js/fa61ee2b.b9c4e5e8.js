"use strict";(self.webpackChunkutm_doc=self.webpackChunkutm_doc||[]).push([[2929],{6690:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"Algorithm_Development/PLANNER/Navigation2/Navigation2","title":"Navigation2 ","description":"Source//docs.nav2.org/index.html","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/09_Algorithm_Development/03_PLANNER/Navigation2/Navigation2.md","sourceDirName":"09_Algorithm_Development/03_PLANNER/Navigation2","slug":"/Algorithm_Development/PLANNER/Navigation2/","permalink":"/en/Algorithm_Development/PLANNER/Navigation2/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Navigation2 ","source":"https://wiki.utmsys.org/Algorithm_Development/PLANNER/Navigation2/"},"sidebar":"tutorialSidebar","previous":{"title":"FastPlanner ","permalink":"/en/Algorithm_Development/PLANNER/Fastplanner/"},"next":{"title":"9.4 \u5b9a\u4f4d\u5efa\u56fe","permalink":"/en/04_SLAM"}}');var i=o(4848),a=o(8453);const r={title:"Navigation2 ",source:"https://wiki.utmsys.org/Algorithm_Development/PLANNER/Navigation2/"},s=void 0,l={},c=[{value:"Overview",id:"overview",level:2},{value:"References",id:"references",level:2},{value:"More information",id:"more-information",level:2}];function h(e){const n={a:"a",code:"code",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["Source: ",(0,i.jsx)(n.a,{href:"https://docs.nav2.org/index.html",children:"https://docs.nav2.org/index.html"})]}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"Nav2 is the professionally supported spiritual successor to the ROS navigation stack. The project aims to find a safe way to enable mobile robots to complete complex tasks in a wide variety of environments and robot kinematics. It not only enables movement from point A to point B, but also handles intermediate poses and represents other types of tasks, such as object tracking. Nav2 is a production-grade, high-quality, proven navigation framework trusted by over 50 companies worldwide."}),"\n",(0,i.jsxs)(n.p,{children:["It provides perception, planning, control, localization, and visualization capabilities for building highly reliable autonomous systems. This enables environmental modeling, dynamic path planning, motor speed calculation, obstacle avoidance, semantic region and object representation, and the construction of higher-level robot behaviors using sensor data. To learn more about this project, including related projects, robots used, comparisons to ROS 1, and maintainers, see ",(0,i.jsx)(n.a,{href:"https://fishros.org/doc/nav2/about/index.html#about",children:"About and Contact"}),". To learn more about navigation and ROS concepts, see ",(0,i.jsx)(n.a,{href:"https://fishros.org/doc/nav2/concepts/index.html#concepts",children:"Navigation Concepts"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Nav2 uses behavior trees to create customized and intelligent navigation behaviors by coordinating many independent, modular servers. Task servers can be used to calculate paths, control forces, recovery, or any other navigation-related tasks. These independent servers communicate with behavior trees (BTs) via ROS interfaces (e.g., action servers or services). A robot can utilize multiple different behavior trees to perform many types of unique tasks."}),"\n",(0,i.jsxs)(n.p,{children:["The diagram below will give you an idea of the Nav2 architecture. Note: Each server can have multiple controller, planner, and recovery plugins, which can be matched with BT plugins. This can be used to create contextual navigation behaviors. If you want to see a comparison between this project and ROS (1) navigation, see: ",(0,i.jsx)(n.a,{href:"https://fishros.org/doc/nav2/about/ros1_comparison.html#ros1-comparison",children:"ROS to ROS 2 Navigation"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Nav2 expects inputs including REP-105-compliant TF transforms, a map source if using a static costmap layer, a BT XML file, and any relevant sensor data sources. It then provides valid velocity commands for the motors of omnidirectional or non-omnidirectional robots. We currently support all major robot types: omnidirectional, differential drive, legged, and Ackermann (car-like) primitives! We also have the unique ability to support circular and arbitrary-shaped robots through SE2 collision checking."}),"\n",(0,i.jsx)(n.p,{children:"It has the following tools:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Loading, serving, and storing maps (map server)"}),"\n",(0,i.jsx)(n.li,{children:"Localizing the robot on a map (AMCL)"}),"\n",(0,i.jsx)(n.li,{children:"Planning a path from A to B around obstacles (Nav2 planner)"}),"\n",(0,i.jsx)(n.li,{children:"Controlling the robot to move along a path (Nav2 controller)"}),"\n",(0,i.jsx)(n.li,{children:"Make path planning more continuous and feasible (Nav2 smoother)"}),"\n",(0,i.jsx)(n.li,{children:"Convert sensor data into a costmap representation of the world (Nav2 Costmap 2D)"}),"\n",(0,i.jsx)(n.li,{children:"Use behavior trees to build complex robot behaviors (Nav2 behavior trees and BT navigator)"}),"\n",(0,i.jsx)(n.li,{children:"Computing recovery behavior in case of failure (Nav2 recovery)"}),"\n",(0,i.jsx)(n.li,{children:"Follow waypoints in sequence (Nav2 Waypoint Follower)"}),"\n",(0,i.jsx)(n.li,{children:"Manage the server's lifecycle and watchdog (Nav2 Lifecycle Manager)"}),"\n",(0,i.jsx)(n.li,{children:"Plugins to enable custom algorithms and behaviors (Nav2 core)"}),"\n",(0,i.jsx)(n.li,{children:"Monitoring raw sensor data to detect impending collisions or hazardous situations (collision monitoring)"}),"\n",(0,i.jsx)(n.li,{children:"Python3 API for interacting with Nav2 in a Pythonic way (Simple Commander)"}),"\n",(0,i.jsxs)(n.li,{children:["Smoothing of the output velocity to ensure dynamic feasibility of the command (velocity smoother) ",(0,i.jsx)(n.a,{href:"https://fishros.org/doc/nav2/_images/nav2_architecture.png",children:(0,i.jsx)(n.img,{src:"https://fishros.org/doc/nav2/_images/nav2_architecture.png",alt:"Navigation2 block diagram"})})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["We also provide a set of starter plugins to help you get started. A list of all plugins can be found in ",(0,i.jsx)(n.a,{href:"https://fishros.org/doc/nav2/plugins/index.html#plugins",children:"Navigating Plugins"})," - but they include algorithms for common behaviors and bot platform types."]}),"\n",(0,i.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,i.jsx)(n.p,{children:"If you use the navigation framework, the algorithms in this repository, or the ideas therein, please cite this work in your paper!"}),"\n",(0,i.jsxs)(n.p,{children:["S. Macenski, F. Mart\xedn, R. White, J. Clavero.",(0,i.jsx)(n.a,{href:"https://arxiv.org/abs/2003.00368/",children:"The Marathon 2: A Navigation System"}),". IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS), 2020."]}),"\n",(0,i.jsx)(n.p,{children:"IROS 2020 presentation on the Nav2 Marathon experiment:"}),"\n",(0,i.jsx)(n.p,{children:"If you use our work in a formal comparison of VSLAM and service robotics needs, please cite the paper:"}),"\n",(0,i.jsxs)(n.p,{children:["A. Merzlyakov, S. Macenski.",(0,i.jsx)(n.a,{href:"https://arxiv.org/abs/2107.07589",children:"A Comparison of Modern General-Purpose Visual SLAM Approaches"}),". IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS), 2021."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"@InProceedings{vslamComparison2021,\nauthor = {Merzlyakov, Alexey and Macenski, Steven},\ntitle = {A Comparison of Modern General-Purpose Visual SLAM Approaches},\nbooktitle = {2021 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS)},\nyear = {2021}\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"more-information",children:"More information"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://nav2.org/",children:"Nav2 Official"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://docs.nav2.org/getting_started/index.html",children:"Nav2 Docs"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/ros-navigation/navigation2",children:"Nav2 Code"})}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>s});var t=o(6540);const i={},a=t.createContext(i);function r(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);