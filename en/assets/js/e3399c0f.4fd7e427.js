"use strict";(self.webpackChunkutm_doc=self.webpackChunkutm_doc||[]).push([[545],{8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>a});var s=i(6540);const o={},t=s.createContext(o);function r(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(t.Provider,{value:n},e.children)}},8485:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"Algorithm_Development/SIMULATOR/SITL/Gazebo/PX4 SITL","title":"PX4 SITL ","description":"Using the Gazebo","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/09_Algorithm_Development/05_SIMULATOR/01_SITL/Gazebo/PX4 SITL.md","sourceDirName":"09_Algorithm_Development/05_SIMULATOR/01_SITL/Gazebo","slug":"/Algorithm_Development/SIMULATOR/SITL/Gazebo/PX4 SITL","permalink":"/en/Algorithm_Development/SIMULATOR/SITL/Gazebo/PX4 SITL","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"PX4 SITL ","source":"https://wiki.utmsys.org/Algorithm_Development/SIMULATOR/SITL/Gazebo/PX4%20SITL%E8%BD%AF%E4%BB%B6%E5%9C%A8%E7%8E%AF%E4%BB%BF%E7%9C%9F"},"sidebar":"tutorialSidebar","previous":{"title":"AirSim ","permalink":"/en/Algorithm_Development/SIMULATOR/SITL/AirSim/"},"next":{"title":"Pegasus","permalink":"/en/Algorithm_Development/SIMULATOR/SITL/IsaacSim/Pegasus"}}');var o=i(4848),t=i(8453);const r={title:"PX4 SITL ",source:"https://wiki.utmsys.org/Algorithm_Development/SIMULATOR/SITL/Gazebo/PX4%20SITL%E8%BD%AF%E4%BB%B6%E5%9C%A8%E7%8E%AF%E4%BB%BF%E7%9C%9F"},a=void 0,l={},d=[{value:"Using the Gazebo",id:"using-the-gazebo",level:2},{value:"SITL important concepts",id:"sitl-important-concepts",level:2},{value:"1. PX4 Gazebo Version GZ_VERSION",id:"1-px4-gazebo-version-gz_version",level:3},{value:"1. Core Background: Gazebo Version Evolution and PX4",id:"1-core-background-gazebo-version-evolution-and-px4",level:4},{value:"2. GZ_VERSION Values and usage",id:"2-gz_version-values-and-usage",level:4},{value:"3. How to GZ_VERSION",id:"3-how-to-gz_version",level:4},{value:"2. px4_gz_bridgeCore communication",id:"2-px4_gz_bridgecore-communication",level:3},{value:"1. Core Function:",id:"1-core-function",level:4},{value:"2. Technical Features: Lightweight, Native",id:"2-technical-features-lightweight-native",level:4},{value:"3. ros_gz_bridgeCommunication bridge between ROS and Gazebo (indirectly supports PX4",id:"3-ros_gz_bridgecommunication-bridge-between-ros-and-gazebo-indirectly-supports-px4",level:3},{value:"1. px4_gz_bridge The core",id:"1-px4_gz_bridge-the-core",level:4},{value:"2. Typical",id:"2-typical",level:4},{value:"4. SDF: &quot;Blueprint&quot;",id:"4-sdf-blueprint",level:3},{value:"1. Core role: defining the \u201csimulated world",id:"1-core-role-defining-the-simulated-world",level:4},{value:"2. Location and",id:"2-location-and",level:4},{value:"3. Key Features: Customizability and",id:"3-key-features-customizability-and",level:4},{value:"Summary: The synergistic",id:"summary-the-synergistic",level:3},{value:"Frequently Asked",id:"frequently-asked",level:2},{value:"1. Make px4_sitl gz_x500 shows Preflight Fail. Preflight check failed and sensor data",id:"1-make-px4_sitl-gz_x500-shows-preflight-fail-preflight-check-failed-and-sensor-data",level:3},{value:"2. ros_gz_bridge does not work, and cannot use rviz2 to obtain PX4 x500_mono_cam image",id:"2-ros_gz_bridge-does-not-work-and-cannot-use-rviz2-to-obtain-px4-x500_mono_cam-image",level:3},{value:"3. Timestamp synchronization and alignment",id:"3-timestamp-synchronization-and-alignment",level:3}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"using-the-gazebo",children:"Using the Gazebo"}),"\n",(0,o.jsx)(n.p,{children:"First, we will build a simulated target using the console environment. This will allow us to verify the system setup before committing to the real hardware and IDE."}),"\n",(0,o.jsxs)(n.p,{children:["Navigate to ",(0,o.jsx)(n.strong,{children:"the PX4-Autopilot"})," directory and start ",(0,o.jsx)(n.a,{href:"https://docs.px4.io/main/en/sim_gazebo_gz/",children:"Gazebo SITL using the following command:"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"make px4_sitl gz_x500\n"})}),"\n",(0,o.jsxs)(n.p,{children:["If you have Gazebo Classic installed, start ",(0,o.jsx)(n.a,{href:"https://docs.px4.io/main/en/sim_gazebo_classic/",children:"Gazebo Classic SITL using the following command:"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"make px4_sitl gazebo-classic\n"})}),"\n",(0,o.jsx)(n.p,{children:"This will open the PX4 console:"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"https://docs.px4.io/main/assets/console_gazebo.1HYlL2vW.png",alt:"PX4 console"})}),"\n",(0,o.jsx)(n.p,{children:"Enter the following command to make the drone fly (as shown in the console above):"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"pxh> commander takeoff\n"})}),"\n",(0,o.jsx)(n.p,{children:"The vehicle will take off and you will see the following in the Gazebo simulator UI:"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"https://docs.px4.io/main/assets/gazebo_takeoff.CxeFn6fJ.png",alt:"Gazebo UI and aircraft takeoff"})}),"\n",(0,o.jsxs)(n.p,{children:["The drone can be landed by typing, and the entire simulation can be stopped by pressing ",(0,o.jsx)(n.strong,{children:"CTRL+C"})," (or typing ",(0,o.jsx)(n.code,{children:"shutdown"}),") ",(0,o.jsx)(n.code,{children:"commander land"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"Using a ground control station for simulated flight is closer to actual aircraft operation. While the aircraft is flying (in takeoff flight mode), click a location on the map and enable the slider. This will reposition the aircraft."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"https://docs.px4.io/main/assets/qgc_goto.BTsEWZBV.jpg",alt:"QGroundControl Go"})}),"\n",(0,o.jsx)(n.h2,{id:"sitl-important-concepts",children:"SITL important concepts"}),"\n",(0,o.jsxs)(n.p,{children:["In the process of using Gazebo for Software-In-The-Loop (SITL) simulation in PX4, ",(0,o.jsx)(n.code,{children:"GZ_VERSION"}),", ",(0,o.jsx)(n.code,{children:"px4_gz_bridge"}),",, ",(0,o.jsx)(n.code,{children:"ros_gz_bridge"})," and ",(0,o.jsx)(n.code,{children:"SDF"})," are the four core concepts corresponding to version management, cross-module communication, and simulation model definition, respectively. The following is a detailed analysis:"]}),"\n",(0,o.jsx)(n.h3,{id:"1-px4-gazebo-version-gz_version",children:"1. PX4 Gazebo Version GZ_VERSION"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"GZ_VERSION"})," ",(0,o.jsx)(n.strong,{children:"This is an environment variable used to specify the Gazebo version"}),' in the PX4 build system . Its core function is to solve the "PX4 and Gazebo version compatibility" problem - different PX4 versions support different Gazebo versions. You need to use this variable to clearly compile the target version to avoid compilation failures or functional abnormalities.']}),"\n",(0,o.jsx)(n.h4,{id:"1-core-background-gazebo-version-evolution-and-px4",children:"1. Core Background: Gazebo Version Evolution and PX4"}),"\n",(0,o.jsx)(n.p,{children:'Gazebo (now part of Open Robotics) has gone through several major version iterations, and PX4 supports it with a clear "version binding" feature, mainly divided into two series:'}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Gazebo Classic"}),": such as Gazebo 9 and 11 (mainly supported versions of PX4 v1.13 and earlier);"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Gazebo Fortress/Edifice (next generation Gazebo)"}),': Gradually migrated from PX4 v1.14 and now mainstream (naming changed from "Gazebo X" to "GZ-XXX", such as GZ-Fortress corresponds to version 12).']}),"\n"]}),"\n",(0,o.jsx)(n.h4,{id:"2-gz_version-values-and-usage",children:"2. GZ_VERSION Values and usage"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsxs)(n.th,{children:[(0,o.jsx)(n.code,{children:"GZ_VERSION"})," Value"]}),(0,o.jsx)(n.th,{children:"Corresponding Gazebo version"}),(0,o.jsx)(n.th,{children:"PX4 Supported Version Range"}),(0,o.jsx)(n.th,{children:"Core Purpose"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsxs)(n.td,{children:[(0,o.jsx)(n.code,{children:"9"})," / ",(0,o.jsx)(n.code,{children:"11"})]}),(0,o.jsx)(n.td,{children:"Gazebo Classic 9/11"}),(0,o.jsx)(n.td,{children:"PX4 v1.13 and earlier"}),(0,o.jsx)(n.td,{children:"Traditional SITL simulation (such as multi-rotor and fixed-wing basic scenarios)"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"fortress"})}),(0,o.jsx)(n.td,{children:"GZ-Fortress\uff08v12\uff09"}),(0,o.jsx)(n.td,{children:"PX4 v1.14 ~ v1.15"}),(0,o.jsx)(n.td,{children:"Next-generation simulation, supporting more complex physical effects"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"edifice"})}),(0,o.jsx)(n.td,{children:"GZ-Edifice\uff08v11\uff09"}),(0,o.jsx)(n.td,{children:"PX4 v1.14+ (optional)"}),(0,o.jsx)(n.td,{children:"Transitional version, compatible with some scenarios"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"harmonic"})}),(0,o.jsx)(n.td,{children:"GZ-Harmonic\uff08v13\uff09"}),(0,o.jsx)(n.td,{children:"PX4 v1.16+ (latest mainstream)"}),(0,o.jsx)(n.td,{children:"Latest version, optimized performance and multi-robot support"})]})]})]}),"\n",(0,o.jsx)(n.h4,{id:"3-how-to-gz_version",children:"3. How to GZ_VERSION"}),"\n",(0,o.jsx)(n.p,{children:"When compiling PX4 SITL, specify the version through the terminal environment variable, as shown below:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# 1. \u4e34\u65f6\u8bbe\u7f6e\uff08\u5f53\u524d\u7ec8\u7aef\u751f\u6548\uff09\uff1a\u6307\u5b9a\u4f7f\u7528GZ-Fortress\nexport GZ_VERSION=fortress\n\n# 2. \u7f16\u8bd1PX4 SITL\uff08\u4ee5\u591a\u65cb\u7ffc\u4e3a\u4f8b\uff09\nmake px4_sitl gz_x500\n"})}),"\n",(0,o.jsx)(n.h3,{id:"2-px4_gz_bridgecore-communication",children:"2. px4_gz_bridgeCore communication"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"px4_gz_bridge"})," ",(0,o.jsx)(n.strong,{children:"It is a dedicated communication interface library"}),' officially developed by PX4 . It is used to realize "bidirectional data transmission" between PX4 flight controller (SITL mode) and Gazebo simulator, and is the "data hub" of SITL simulation.']}),"\n",(0,o.jsx)(n.h4,{id:"1-core-function",children:"1. Core Function:"}),"\n",(0,o.jsxs)(n.p,{children:["PX4 (flight control logic) and Gazebo (physical simulation) are based on different message protocols. ",(0,o.jsx)(n.code,{children:"px4_gz_bridge"})," Their core functions are ",(0,o.jsx)(n.strong,{children:"protocol conversion and data routing"}),". The main interactive data types include:"]}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Data direction"}),(0,o.jsx)(n.th,{children:"Key data types"}),(0,o.jsx)(n.th,{children:"Usage"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"PX4 \u2192 Gazebo (control instructions)"}),(0,o.jsx)(n.td,{children:"Motor speed command (Motor Command), attitude control command"}),(0,o.jsx)(n.td,{children:'PX4 sends "control signals" to Gazebo to drive the simulated drone\'s movements'})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"Gazebo \u2192 PX4 (sensor data)"}),(0,o.jsx)(n.td,{children:"IMU (Inertial Measurement Unit), GPS, barometer, visual odometry"}),(0,o.jsx)(n.td,{children:'Gazebo feeds back "sensor data in the simulation environment" to PX4 for the flight control to calculate position/attitude'})]})]})]}),"\n",(0,o.jsx)(n.h4,{id:"2-technical-features-lightweight-native",children:"2. Technical Features: Lightweight, Native"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"No additional dependencies"}),": directly integrated into the PX4 source code ",(0,o.jsx)(n.code,{children:"src/modules/px4_gz_bridge/"})," directory, automatically built with PX4 compilation, no need to install separately;"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Version binding"}),": ",(0,o.jsx)(n.code,{children:"px4_gz_bridge"})," The code will be ",(0,o.jsx)(n.code,{children:"GZ_VERSION"})," adapted to ensure compatibility with the specified Gazebo version (such as message format optimization for GZ-Fortress);"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Extensible"}),": Supports custom message types (such as adding specific sensor data) by simply adding the corresponding protocol conversion logic in the bridge code."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"3-ros_gz_bridgecommunication-bridge-between-ros-and-gazebo-indirectly-supports-px4",children:"3. ros_gz_bridgeCommunication bridge between ROS and Gazebo (indirectly supports PX4"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"ros_gz_bridge"})," It is ",(0,o.jsx)(n.strong,{children:"a universal communication bridge between ROS (Robot Operating System) and Gazebo"}),'. It is not exclusive to PX4, but it is a key middleware in the composite scenario of "PX4+ROS+Gazebo" (such as when ROS nodes are required to process perception and planning algorithms).']}),"\n",(0,o.jsx)(n.h4,{id:"1-px4_gz_bridge-the-core",children:"1. px4_gz_bridge The core"}),"\n",(0,o.jsx)(n.p,{children:"Many beginners confuse the two, and need to clarify their positioning differences:"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Comparison Dimension"}),(0,o.jsx)(n.th,{children:(0,o.jsx)(n.code,{children:"px4_gz_bridge"})}),(0,o.jsx)(n.th,{children:(0,o.jsx)(n.code,{children:"ros_gz_bridge"})})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"Both communication"}),(0,o.jsx)(n.td,{children:"PX4 flight control \u2194 Gazebo"}),(0,o.jsx)(n.td,{children:"ROS node \u2194 Gazebo"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"Protocol Basics"}),(0,o.jsx)(n.td,{children:"PX4 custom UORB message \u2194 Gazebo message"}),(0,o.jsxs)(n.td,{children:["ROS message (e.g. ",(0,o.jsx)(n.code,{children:"sensor_msgs/Imu"}),") \u2194 Gazebo message"]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"Belonging and dependence"}),(0,o.jsx)(n.td,{children:"PX4 source code built-in, no ROS dependency"}),(0,o.jsx)(n.td,{children:"Maintained by Open Robotics, requires ROS 2 (such as Humble)"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"PX4 scenario usage"}),(0,o.jsx)(n.td,{children:"Basic SITL is required (it also needs to be started when there is no ROS)"}),(0,o.jsx)(n.td,{children:"Used when ROS functionality is required (such as RViz visualization, ROS planning nodes)"})]})]})]}),"\n",(0,o.jsx)(n.h4,{id:"2-typical",children:"2. Typical"}),"\n",(0,o.jsxs)(n.p,{children:["When you need to use ROS to process data (such as using ROS 2 nodes for target detection and path planning), ",(0,o.jsx)(n.code,{children:"ros_gz_bridge"})," you need to ",(0,o.jsx)(n.code,{children:"px4_gz_bridge"})," work with it. The data flow example is:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-markdown",children:"Gazebo\uff08\u4eff\u771f\u4f20\u611f\u5668\uff09\u2192 ros_gz_bridge \u2192 ROS 2\u8282\u70b9\uff08\u5904\u7406\u6570\u636e\uff09\u2192 ROS 2\u2192PX4\uff08\u5982\u901a\u8fc7MAVLink\uff09\u2192 PX4\u98de\u63a7\n"})}),"\n",(0,o.jsx)(n.p,{children:"Example startup command (ROS 2 Humble + GZ-Fortress):"}),"\n",(0,o.jsx)(n.h3,{id:"4-sdf-blueprint",children:'4. SDF: "Blueprint"'}),"\n",(0,o.jsxs)(n.p,{children:["SDF (Simulation Description Format) is ",(0,o.jsx)(n.strong,{children:"a standard XML file used by Gazebo to define simulation environments and models"}),". In PX4 SITL, the appearance, physical properties, and sensor configuration of a drone are all defined through SDF files."]}),"\n",(0,o.jsx)(n.h4,{id:"1-core-role-defining-the-simulated-world",children:"1. Core role: defining the \u201csimulated world"}),"\n",(0,o.jsx)(n.p,{children:"When PX4 SITL is started, Gazebo will load the corresponding SDF file, which contains two key pieces of information:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Drone model"}),": such as the multi-rotor frame size, motor position, sensor (IMU/GPS) installation position, and physical parameters (mass, moment of inertia);"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Simulation scene (World)"}),": such as ground, sky, wind, lighting and other environmental parameters (some scenes also include obstacles and other drones)."]}),"\n"]}),"\n",(0,o.jsx)(n.h4,{id:"2-location-and",children:"2. Location and"}),"\n",(0,o.jsx)(n.p,{children:"The PX4 source code has pre-installed SDF files for commonly used drones. The paths are:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-markdown",children:"PX4-Autopilot/Tools/simulation/gz/models/\n# \u793a\u4f8b\uff1aX500\u591a\u65cb\u7ffc\u6a21\u578b\nPX4-Autopilot/Tools/simulation/gz/models/x500/x500.sdf\n"})}),"\n",(0,o.jsx)(n.p,{children:"SDF file snippet (defining the IMU sensor):"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",children:'<sensor name="imu" type="imu">\n  <pose>0 0 0.05 0 0 0</pose> \x3c!-- IMU\u5728\u673a\u67b6\u4e0a\u7684\u5b89\u88c5\u4f4d\u59ff\uff08x,y,z,\u6eda\u8f6c,\u4fef\u4ef0,\u504f\u822a\uff09 --\x3e\n  <topic>/imu</topic> \x3c!-- \u4f20\u611f\u5668\u6570\u636e\u53d1\u5e03\u5230Gazebo\u7684\u8bdd\u9898 --\x3e\n  <imu>\n    <angular_velocity>\n      <noise type="gaussian">\n        <mean>0.0</mean>\n        <stddev>0.001 0.001 0.001</stddev> \x3c!-- \u89d2\u901f\u5ea6\u566a\u58f0\u53c2\u6570 --\x3e\n      </noise>\n    </angular_velocity>\n    \x3c!-- \u52a0\u901f\u5ea6\u8ba1\u3001\u9640\u87ba\u4eea\u7b49\u53c2\u6570\u7701\u7565 --\x3e\n  </imu>\n</sensor>\n'})}),"\n",(0,o.jsx)(n.h4,{id:"3-key-features-customizability-and",children:"3. Key Features: Customizability and"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Parameter modification"}),": You can directly edit the SDF file to adjust simulation parameters (such as increasing sensor noise and modifying the rack mass) without modifying the PX4 core code;"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Model reuse"}),": Supports importing third-party SDF models (such as custom drones and scenes). Simply put the model file into Gazebo's model search path (or specify the path in the PX4 startup script)."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"summary-the-synergistic",children:"Summary: The synergistic"}),"\n",(0,o.jsx)(n.p,{children:"In the PX4 Gazebo SITL flow, the collaborative logic of the four concepts can be summarized as follows:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"GZ_VERSION"})," Ensure compatibility by specifying the target Gazebo version;"]}),"\n",(0,o.jsx)(n.li,{children:"Gazebo loads the SDF file and builds the simulation world including the drone and the environment;"}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"px4_gz_bridge"})," Start and implement core data interaction between the PX4 flight controller and Gazebo (control commands + sensor data);"]}),"\n",(0,o.jsxs)(n.li,{children:["If ROS functionality is required, ",(0,o.jsx)(n.code,{children:"ros_gz_bridge"}),' start it and forward Gazebo data to the ROS topic (or receive ROS commands), forming a "PX4-ROS-Gazebo" closed loop.']}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:'Understanding the roles of these four is the basis for troubleshooting PX4 SITL compilation errors and customizing simulation scenarios (such as solving common problems such as "no sensor data feedback" and "Gazebo startup failure").'}),"\n",(0,o.jsx)(n.h2,{id:"frequently-asked",children:"Frequently Asked"}),"\n",(0,o.jsx)(n.h3,{id:"1-make-px4_sitl-gz_x500-shows-preflight-fail-preflight-check-failed-and-sensor-data",children:"1. Make px4_sitl gz_x500 shows Preflight Fail. Preflight check failed and sensor data"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.img,{src:"https://wiki.utmsys.org/assets/images/Pasted%20image%2020250807103725-c6d6ed94083b8e9bff520ec30bb8dbfb.png",alt:""})," Solution 1: Uninstall and reinstall the gz version, such as gzgarden gzharmonic, etc. ",(0,o.jsx)(n.a,{href:"https://github.com/PX4/PX4-Autopilot/issues/24033",children:"https://github.com/PX4/PX4-Autopilot/issues/24033"})," ",(0,o.jsx)(n.a,{href:"https://discuss.px4.io/t/px4-simulation-in-gazebo-fortress-support/45249",children:"https://discuss.px4.io/t/px4-simulation-in-gazebo-fortress-support/45249"})," Solution 2: Since the gz file of Tools was replaced with the gz file of v1.16 in version v1.15, there is no problem when replacing it back to the original version. Solution 3: Use other simulation body and environment models, such as make px4_sitl gz_x500 Solution 4: Check whether the sdf file contains the sensor plug-in. If not, try ",(0,o.jsx)(n.a,{href:"https://discuss.px4.io/t/missing-sensors-for-a-gazebo-simulation/32787",children:"Missing sensors for a Gazebo simulation"})]}),"\n",(0,o.jsx)(n.h3,{id:"2-ros_gz_bridge-does-not-work-and-cannot-use-rviz2-to-obtain-px4-x500_mono_cam-image",children:"2. ros_gz_bridge does not work, and cannot use rviz2 to obtain PX4 x500_mono_cam image"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://discuss.px4.io/t/ros-gz-bridge-not-working-unable-to-use-rviz2-to-fetch-px4-x500-mono-cam-image-topic/44447",children:"https://discuss.px4.io/t/ros-gz-bridge-not-working-unable-to-use-rviz2-to-fetch-px4-x500-mono-cam-image-topic/44447"})}),"\n",(0,o.jsx)(n.h3,{id:"3-timestamp-synchronization-and-alignment",children:"3. Timestamp synchronization and alignment"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://blog.csdn.net/2401_83038233/article/details/149101727",children:"https://blog.csdn.net/2401_83038233/article/details/149101727"})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}}}]);