"use strict";(self.webpackChunkutm_doc=self.webpackChunkutm_doc||[]).push([[1252],{8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>l});var t=i(6540);const o={},s=t.createContext(o);function r(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(s.Provider,{value:n},e.children)}},9712:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"Algorithm_Development/SIMULATOR/HITL/PX4 HITL Tutorial","title":"HITL-PX4 Tutorial","description":"Hardware-in-the-loop simulation","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/09_Algorithm_Development/05_SIMULATOR/02_HITL/PX4 HITL Tutorial.md","sourceDirName":"09_Algorithm_Development/05_SIMULATOR/02_HITL","slug":"/Algorithm_Development/SIMULATOR/HITL/PX4 HITL Tutorial","permalink":"/en/Algorithm_Development/SIMULATOR/HITL/PX4 HITL Tutorial","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"HITL-PX4 Tutorial","source":"https://wiki.utmsys.org/Algorithm_Development/SIMULATOR/HITL/%E7%A1%AC%E4%BB%B6%E5%9C%A8%E7%8E%AF%E4%BB%BF%E7%9C%9FHITL-PX4%20%E6%8C%87%E5%8D%97"},"sidebar":"tutorialSidebar","previous":{"title":"HITL","permalink":"/en/02_HITL"},"next":{"title":"PX4 HITL ","permalink":"/en/Algorithm_Development/SIMULATOR/HITL/PX4 HITL"}}');var o=i(4848),s=i(8453);const r={title:"HITL-PX4 Tutorial",source:"https://wiki.utmsys.org/Algorithm_Development/SIMULATOR/HITL/%E7%A1%AC%E4%BB%B6%E5%9C%A8%E7%8E%AF%E4%BB%BF%E7%9C%9FHITL-PX4%20%E6%8C%87%E5%8D%97"},l=void 0,a={},c=[{value:"Hardware-in-the-loop simulation",id:"hardware-in-the-loop-simulation",level:2},{value:"HITL compatible",id:"hitl-compatible",level:2},{value:"HITL simulation",id:"hitl-simulation",level:2},{value:"HITL and",id:"hitl-and",level:2},{value:"Setting up",id:"setting-up",level:2},{value:"Check if there is",id:"check-if-there-is",level:2},{value:"Adding HITL modules to",id:"adding-hitl-modules-to",level:3},{value:"PX4",id:"px4",level:3},{value:"Simulator-specific",id:"simulator-specific",level:3},{value:"Pavilion",id:"pavilion",level:4},{value:"jMAVSim (quadrotors only",id:"jmavsim-quadrotors-only",level:4},{value:"Executing autonomous",id:"executing-autonomous",level:2},{value:"More information",id:"more-information",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"hardware-in-the-loop-simulation",children:"Hardware-in-the-loop simulation"}),"\n",(0,o.jsx)(n.p,{children:"Hardware-in-the-loop (HITL or HIL) is a simulation mode where regular PX4 firmware runs on real flight controller hardware. The benefit of this approach is that most of the actual flight code can be tested on real hardware."}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://docs.px4.io/main/en/sim_jmavsim/",children:"PX4 supports both HITL (using jMAVSim"})," or ",(0,o.jsx)(n.a,{href:"https://docs.px4.io/main/en/sim_gazebo_classic/",children:"Gazebo Classic"})," ) and VTOL (using Gazebo Classic) for multirotors."]}),"\n",(0,o.jsx)(n.h2,{id:"hitl-compatible",children:"HITL compatible"}),"\n",(0,o.jsx)(n.p,{children:"Compatible devices and simulator settings are:"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Body"}),(0,o.jsx)(n.th,{children:(0,o.jsx)(n.code,{children:"SYS_AUTOSTART"})}),(0,o.jsx)(n.th,{children:"Pavilion Classic"}),(0,o.jsx)(n.th,{children:"Simulation MAVSim"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.a,{href:"https://docs.px4.io/main/en/airframes/airframe_reference.html#copter_simulation_hil_quadcopter_x",children:"HIL QuadcopterX"})}),(0,o.jsx)(n.td,{children:"1001"}),(0,o.jsx)(n.td,{children:"yes"}),(0,o.jsx)(n.td,{children:"yes"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.a,{href:"https://docs.px4.io/main/en/airframes/airframe_reference.html#vtol_standard_vtol_hil_standard_vtol_quadplane",children:"HIL standard VTOL quadcopter"})}),(0,o.jsx)(n.td,{children:"1002"}),(0,o.jsx)(n.td,{children:"yes"}),(0,o.jsx)(n.td,{})]})]})]}),"\n",(0,o.jsx)(n.h2,{id:"hitl-simulation",children:"HITL simulation"}),"\n",(0,o.jsxs)(n.p,{children:["Through hardware-in-the-loop (HITL) simulation, regular PX4 firmware can be run on real hardware. JMAVSim or Gazebo Classic (running on the development computer) connects to the flight controller hardware via USB/UART. The simulator acts as a gateway, sharing MAVLink data between PX4 and ",(0,o.jsx)(n.em,{children:"QGroundControl."})]}),"\n",(0,o.jsx)(n.p,{children:"information"}),"\n",(0,o.jsxs)(n.p,{children:["It is also possible to connect to the simulator via UDP if the flight controller supports networking and uses a stable, low-latency connection (e.g. a wired Ethernet connection - WiFi is often unreliable). For example, this configuration has been tested running PX4 on a Raspberry Pi connected to a computer via Ethernet (the launch configuration containing the command to run jMAVSim can be found in ",(0,o.jsx)(n.a,{href:"https://github.com/PX4/PX4-Autopilot/blob/main/posix-configs/rpi/px4_hil.config",children:"px4_hil.config"})," )."]}),"\n",(0,o.jsx)(n.p,{children:"The following image shows the simulation environment:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["A HITL configuration was chosen (via QGroundControl) that does not enable any real sensors ",(0,o.jsx)(n.em,{children:"."})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.em,{children:"jMAVSim"})," or ",(0,o.jsx)(n.em,{children:"Gazebo Classic"})," is connected to the flight controller via USB."]}),"\n",(0,o.jsxs)(n.li,{children:["The simulator connects to ",(0,o.jsx)(n.em,{children:"QGroundControl"})," via UDP and bridges its MAVLink messages to PX4."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.em,{children:"Gazebo Classic"})," and ",(0,o.jsx)(n.em,{children:"jMAVSim"})," can also connect to off-board APIs and bridge MAVLink messages to PX4."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.em,{children:"Optionally,"})," joystick/gamepad hardware can be connected via QGroundControl using a serial connection."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"https://docs.px4.io/main/assets/px4_hitl_overview_jmavsim_gazebo.C9328QPf.svg",alt:"HITL Setup - jMAVSim and Gazebo Classic"})}),"\n",(0,o.jsx)(n.h2,{id:"hitl-and",children:"HITL and"}),"\n",(0,o.jsx)(n.p,{children:"SITL runs on a development computer in a simulated environment and uses firmware built specifically for that environment. The system operates normally except that the simulation driver provides fake environment data from the simulator."}),"\n",(0,o.jsx)(n.p,{children:'In contrast, HITL runs regular PX4 firmware in "HITL mode" on regular hardware. Simulation data enters the system at a different point than in SITL. Core modules, such as commanders and sensors, enter HITL mode at boot time, bypassing some normal functionality.'}),"\n",(0,o.jsx)(n.p,{children:"In summary, HITL uses standard firmware to run PX4 on real hardware, but SITL actually executes more standard system code."}),"\n",(0,o.jsx)(n.h2,{id:"setting-up",children:"Setting up"}),"\n",(0,o.jsx)(n.h2,{id:"check-if-there-is",children:"Check if there is"}),"\n",(0,o.jsxs)(n.p,{children:["The modules required for HITL ( ",(0,o.jsx)(n.a,{href:"https://docs.px4.io/main/en/modules/modules_driver.html#pwm-out-sim",children:(0,o.jsx)(n.code,{children:"pwm_out_sim"})}),") are not built into all PX4 firmware by default."]}),"\n",(0,o.jsx)(n.p,{children:"To check if the module is present on your flight controller:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Open QGroundControl"}),"\n",(0,o.jsxs)(n.li,{children:["Open ",(0,o.jsx)(n.strong,{children:"Analysis Tools > Mavlink Console"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["Enter the following command in the console:","\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sh",children:"\u5618pwm_out_sim status\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["If the return value is yes ",(0,o.jsx)(n.code,{children:"nsh: pwm_out_sim: command not found"}),", it means you don't have the module installed."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["If ",(0,o.jsx)(n.code,{children:"pwm_out_sim"})," it is not present, you will need to add it to your firmware in order to use HITL simulation."]}),"\n",(0,o.jsx)(n.h3,{id:"adding-hitl-modules-to",children:"Adding HITL modules to"}),"\n",(0,o.jsxs)(n.p,{children:["Add the following key to your flight controller's configuration file to include the required modules (for example, see ",(0,o.jsx)(n.a,{href:"https://github.com/PX4/PX4-Autopilot/blob/main/boards/px4/fmu-v6x/default.px4board",children:"board/px4/fmu-v6x/default.px4board"})," ). Then rebuild and flash the firmware to the board."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-markdown",children:"\u6587\u672cCONFIG_MODULES_SIMULATION_PWM_OUT_SIM=y\n"})}),"\n",(0,o.jsxs)(n.p,{children:["You can also launch the GUI configuration tool using the following command and enable them interactively at: ",(0,o.jsx)(n.strong,{children:"modules > Simulation > pwm_out_sim"}),". For example, to update fmu-v6x, you can use:"]}),"\n",(0,o.jsx)(n.h3,{id:"px4",children:"PX4"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Connect the autopilot directly to ",(0,o.jsx)(n.em,{children:"QGroundControl via USB."})]}),"\n",(0,o.jsxs)(n.li,{children:["Select the body","\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Open ",(0,o.jsx)(n.strong,{children:'"Settings" > "Device"'})]}),"\n",(0,o.jsxs)(n.li,{children:["Select the compatible device you want to test ",(0,o.jsx)(n.a,{href:"https://docs.px4.io/main/en/simulation/#compatible_airframe",children:". Then click"})," ",(0,o.jsx)(n.strong,{children:'"Apply and Restart"'})," in the upper right corner of the ",(0,o.jsx)(n.em,{children:"device settings"})," page."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.li,{children:"If necessary, calibrate your RC or joystick."}),"\n",(0,o.jsxs)(n.li,{children:["Setting up UDP","\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.em,{children:"On the General"})," tab of the Settings menu , uncheck all the ",(0,o.jsx)(n.em,{children:"Auto-connect"})," boxes except ",(0,o.jsx)(n.strong,{children:"UDP"}),".",(0,o.jsx)(n.img,{src:"https://docs.px4.io/main/assets/qgc_hitl_autoconnect.CZ7k3rQD.png",alt:"QGC automatic connection settings for HITL"})]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["(Optional) Configure the joystick and failsafe. Set the following ",(0,o.jsx)(n.a,{href:"https://docs.px4.io/main/en/advanced_config/parameters.html",children:"parameters"})," to use a joystick instead of an RC remote:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"https://docs.px4.io/main/en/advanced_config/parameter_reference.html#COM_RC_IN_MODE",children:"COM_RC_IN_MODE is set"})," to \u201cJoystick/No RC Check.\u201d This allows joystick input and disables RC input checking."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"https://docs.px4.io/main/en/advanced_config/parameter_reference.html#NAV_RCL_ACT",children:"NAV_RCL_ACT"}),' is set to "Disabled". This ensures that when running HITL without radio control, there will be no interference from any RC failsafe operation. Tip ',(0,o.jsx)(n.em,{children:"The QGroundControl User Guide"})," also contains instructions for ",(0,o.jsx)(n.a,{href:"https://docs.qgroundcontrol.com/master/en/qgc-user-guide/setup_view/joystick.html",children:"joystick"})," and ",(0,o.jsx)(n.a,{href:"https://docs.qgroundcontrol.com/master/en/qgc-user-guide/settings_view/virtual_joystick.html",children:"virtual joystick"})," setup."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Once configuration is complete, ",(0,o.jsx)(n.strong,{children:"close"})," ",(0,o.jsx)(n.em,{children:"QGroundControl"})," and disconnect the flight controller hardware from your computer."]}),"\n",(0,o.jsx)(n.h3,{id:"simulator-specific",children:"Simulator-specific"}),"\n",(0,o.jsx)(n.p,{children:"Follow the appropriate setup steps for your specific emulator in the following sections."}),"\n",(0,o.jsx)(n.h4,{id:"pavilion",children:"Pavilion"}),"\n",(0,o.jsx)(n.p,{children:"information"}),"\n",(0,o.jsxs)(n.p,{children:["Make sure ",(0,o.jsx)(n.em,{children:"QGroundControl"})," is not running!"]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Build PX4 ",(0,o.jsx)(n.a,{href:"https://docs.px4.io/main/en/sim_gazebo_classic/",children:"using Gazebo Classic (for building Gazebo Classic plugins)."})]}),"\n",(0,o.jsxs)(n.li,{children:["Open the sdf file of the vehicle model (for example, ",(0,o.jsx)(n.strong,{children:"Tools/simulation/gazebo-classic/sitl_gazebo-classic/models/iris_hitl/iris_hitl.sdf"})," )."]}),"\n",(0,o.jsxs)(n.li,{children:["Replace ",(0,o.jsx)(n.code,{children:"serialDevice"})," the _parameter ( _) if necessary. ",(0,o.jsx)(n.code,{children:"/dev/ttyACM0"})," The serial device you see depends on the port you used to connect the vehicle to your computer (usually ",(0,o.jsx)(n.code,{children:"/dev/ttyACM0"})," _). An easy way to check this on Ubuntu is to plug in the autopilot, open a terminal, and type _ ",(0,o.jsx)(n.code,{children:'dmesg | grep "tty"'}),". The correct device will be the last one displayed."]}),"\n",(0,o.jsxs)(n.li,{children:["Set the environment variables: and run Gazebo Classic in HITL mode:","\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sh",children:"\u5618gazebo Tools/simulation/gazebo-classic/sitl_gazebo-classic/worlds/hitl_iris.world\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["Start ",(0,o.jsx)(n.em,{children:"QGroundControl"}),". It should automatically connect to PX4 and Gazebo Classic."]}),"\n"]}),"\n",(0,o.jsx)(n.h4,{id:"jmavsim-quadrotors-only",children:"jMAVSim (quadrotors only"}),"\n",(0,o.jsx)(n.p,{children:"information"}),"\n",(0,o.jsxs)(n.p,{children:["Make sure ",(0,o.jsx)(n.em,{children:"QGroundControl"})," is not running!"]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Connect the flight controller to your computer and wait for it to boot up."}),"\n",(0,o.jsxs)(n.li,{children:["Running jMAVSim in HITL mode: Information ",(0,o.jsx)(n.code,{children:"/dev/ttyACM0"})," Replace the serial port name as appropriate. On macOS, this is ",(0,o.jsx)(n.code,{children:"/dev/tty.usbmodem1"}),". On Windows (including Cygwin), this is COM1 or another port - check the connection in Windows Device Manager."]}),"\n",(0,o.jsxs)(n.li,{children:["Start ",(0,o.jsx)(n.em,{children:"QGroundControl"}),". It should automatically connect to PX4 and jMAVSim."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"executing-autonomous",children:"Executing autonomous"}),"\n",(0,o.jsxs)(n.p,{children:["You should be able to use ",(0,o.jsx)(n.em,{children:"QGroundControl"})," to ",(0,o.jsx)(n.a,{href:"https://docs.qgroundcontrol.com/master/en/qgc-user-guide/fly_view/fly_view.html#missions",children:"run missions"})," and control the vehicle in other ways."]}),"\n",(0,o.jsx)(n.h2,{id:"more-information",children:"More information"}),"\n",(0,o.jsxs)(n.p,{children:["Reference link: ",(0,o.jsx)(n.a,{href:"https://docs.px4.io/main/en/simulation/hitl.html",children:"https://docs.px4.io/main/en/simulation/hitl.html"})]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);